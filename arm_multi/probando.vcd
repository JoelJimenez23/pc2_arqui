$date
	Sat Nov 16 08:52:34 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! WriteData [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 # Adr [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 & WriteData [31:0] $end
$var wire 32 ' ReadData [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 ( Adr [31:0] $end
$scope module arm $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 4 ) rot [3:0] $end
$var wire 1 * shift_op $end
$var wire 1 + mla_op $end
$var wire 1 , div_sel $end
$var wire 1 - div_op $end
$var wire 32 . WriteData [31:0] $end
$var wire 2 / ResultSrc [1:0] $end
$var wire 1 0 RegWrite $end
$var wire 2 1 RegSrc [1:0] $end
$var wire 32 2 ReadData [31:0] $end
$var wire 1 3 PCWrite $end
$var wire 1 " MemWrite $end
$var wire 32 4 Instr [31:0] $end
$var wire 2 5 ImmSrc [1:0] $end
$var wire 1 6 IRWrite $end
$var wire 1 7 DivMulSrc $end
$var wire 1 8 AdrSrc $end
$var wire 32 9 Adr [31:0] $end
$var wire 2 : ALUSrcB [1:0] $end
$var wire 1 ; ALUSrcA $end
$var wire 4 < ALUFlags [3:0] $end
$var wire 2 = ALUControl [1:0] $end
$scope module c $end
$var wire 20 > Instr [31:12] $end
$var wire 4 ? Instr_7_4 [3:0] $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 * shift_op $end
$var wire 1 + mla_op $end
$var wire 1 , div_sel $end
$var wire 1 - div_op $end
$var wire 2 @ ResultSrc [1:0] $end
$var wire 1 0 RegWrite $end
$var wire 1 A RegW $end
$var wire 2 B RegSrc [1:0] $end
$var wire 1 3 PCWrite $end
$var wire 1 C PCS $end
$var wire 1 D NextPC $end
$var wire 1 " MemWrite $end
$var wire 1 E MemW $end
$var wire 2 F ImmSrc [1:0] $end
$var wire 1 6 IRWrite $end
$var wire 2 G FlagW [1:0] $end
$var wire 1 7 DivMulSrc $end
$var wire 1 8 AdrSrc $end
$var wire 2 H ALUSrcB [1:0] $end
$var wire 1 ; ALUSrcA $end
$var wire 4 I ALUFlags [3:0] $end
$var wire 2 J ALUControl [1:0] $end
$scope module cl $end
$var wire 4 K Cond [3:0] $end
$var wire 2 L FlagWrite [1:0] $end
$var wire 1 " MemWrite $end
$var wire 1 3 PCWrite $end
$var wire 1 0 RegWrite $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 A RegW $end
$var wire 1 C PCS $end
$var wire 1 D NextPC $end
$var wire 1 E MemW $end
$var wire 4 M Flags [3:0] $end
$var wire 2 N FlagW [1:0] $end
$var wire 1 O CondEx $end
$var wire 4 P ALUFlags [3:0] $end
$scope module cc $end
$var wire 4 Q Cond [3:0] $end
$var wire 4 R Flags [3:0] $end
$var wire 1 S ge $end
$var wire 1 T zero $end
$var wire 1 U overflow $end
$var wire 1 V neg $end
$var wire 1 W carry $end
$var reg 1 O CondEx $end
$upscope $end
$scope module flagreg0 $end
$var wire 1 $ clk $end
$var wire 2 X d [1:0] $end
$var wire 1 Y en $end
$var wire 1 % reset $end
$var parameter 32 Z WIDTH $end
$var reg 2 [ q [1:0] $end
$upscope $end
$scope module flagreg1 $end
$var wire 1 $ clk $end
$var wire 2 \ d [1:0] $end
$var wire 1 ] en $end
$var wire 1 % reset $end
$var parameter 32 ^ WIDTH $end
$var reg 2 _ q [1:0] $end
$upscope $end
$scope module flagwritereg $end
$var wire 1 $ clk $end
$var wire 2 ` d [1:0] $end
$var wire 1 % reset $end
$var parameter 32 a WIDTH $end
$var reg 2 b q [1:0] $end
$upscope $end
$upscope $end
$scope module dec $end
$var wire 6 c Funct [5:0] $end
$var wire 2 d ImmSrc [1:0] $end
$var wire 4 e Instr_7_4 [3:0] $end
$var wire 2 f Op [1:0] $end
$var wire 1 C PCS $end
$var wire 4 g Rd [3:0] $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 * shift_op $end
$var wire 1 + mla_op $end
$var wire 1 , div_sel $end
$var wire 1 - div_op $end
$var wire 2 h ResultSrc [1:0] $end
$var wire 1 A RegW $end
$var wire 2 i RegSrc [1:0] $end
$var wire 1 D NextPC $end
$var wire 1 E MemW $end
$var wire 1 6 IRWrite $end
$var wire 1 7 DivMulSrc $end
$var wire 1 j Branch $end
$var wire 1 8 AdrSrc $end
$var wire 2 k ALUSrcB [1:0] $end
$var wire 1 ; ALUSrcA $end
$var wire 1 l ALUOp $end
$var reg 2 m ALUControl [1:0] $end
$var reg 2 n FlagW [1:0] $end
$scope module fsm $end
$var wire 6 o Funct [5:0] $end
$var wire 4 p Instr_7_4 [3:0] $end
$var wire 2 q Op [1:0] $end
$var wire 4 r Rd [3:0] $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 * shift_op $end
$var wire 1 + mla_op $end
$var wire 1 - div_op $end
$var wire 2 s ResultSrc [1:0] $end
$var wire 1 A RegW $end
$var wire 1 D NextPC $end
$var wire 1 E MemW $end
$var wire 1 6 IRWrite $end
$var wire 1 j Branch $end
$var wire 1 8 AdrSrc $end
$var wire 2 t ALUSrcB [1:0] $end
$var wire 1 ; ALUSrcA $end
$var wire 1 l ALUOp $end
$var parameter 5 u ALUWB $end
$var parameter 5 v BRANCH $end
$var parameter 5 w DECODE $end
$var parameter 5 x EXECUTEI $end
$var parameter 5 y EXECUTER $end
$var parameter 5 z FETCH $end
$var parameter 5 { MEMADR $end
$var parameter 5 | MEMREAD $end
$var parameter 5 } MEMWB $end
$var parameter 5 ~ MEMWRITE $end
$var reg 12 !" controls [11:0] $end
$var reg 1 - div_op_aux $end
$var reg 1 + mla_op_aux $end
$var reg 5 "" nextstate [4:0] $end
$var reg 1 * shift_op_aux $end
$var reg 5 #" state [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 2 $" ALUControl [1:0] $end
$var wire 1 ; ALUSrcA $end
$var wire 2 %" ALUSrcB [1:0] $end
$var wire 1 8 AdrSrc $end
$var wire 1 7 DivMulSrc $end
$var wire 1 6 IRWrite $end
$var wire 2 &" ImmSrc [1:0] $end
$var wire 1 3 PCWrite $end
$var wire 2 '" RegSrc [1:0] $end
$var wire 1 0 RegWrite $end
$var wire 2 (" ResultSrc [1:0] $end
$var wire 1 $ clk $end
$var wire 1 - div_op $end
$var wire 1 , div_sel $end
$var wire 1 + mla_op $end
$var wire 1 % reset $end
$var wire 4 )" rot [3:0] $end
$var wire 1 * shift_op $end
$var wire 32 *" sz4 [31:0] $end
$var wire 32 +" rd3 [31:0] $end
$var wire 32 ," pre_WriteData [31:0] $end
$var wire 4 -" pre_RA1 [3:0] $end
$var wire 32 ." pre_ALUResult [31:0] $end
$var wire 32 /" pre_A [31:0] $end
$var wire 32 0" WriteData [31:0] $end
$var wire 32 1" SrcB [31:0] $end
$var wire 32 2" SrcA [31:0] $end
$var wire 32 3" Result [31:0] $end
$var wire 32 4" ReadData [31:0] $end
$var wire 32 5" RD3 [31:0] $end
$var wire 32 6" RD2 [31:0] $end
$var wire 32 7" RD1 [31:0] $end
$var wire 4 8" RA4 [3:0] $end
$var wire 4 9" RA2 [3:0] $end
$var wire 4 :" RA1 [3:0] $end
$var wire 32 ;" PC [31:0] $end
$var wire 32 <" Instr [31:0] $end
$var wire 32 =" ExtImm_rot [31:0] $end
$var wire 32 >" ExtImm [31:0] $end
$var wire 32 ?" Data [31:0] $end
$var wire 32 @" DIVResult [31:0] $end
$var wire 32 A" Adr [31:0] $end
$var wire 32 B" ALUResult [31:0] $end
$var wire 32 C" ALUOut [31:0] $end
$var wire 4 D" ALUFlags [3:0] $end
$var wire 32 E" A [31:0] $end
$scope module ALUResultReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 F" d [31:0] $end
$var parameter 32 G" WIDTH $end
$var reg 32 H" q [31:0] $end
$upscope $end
$scope module DataReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 I" d [31:0] $end
$var parameter 32 J" WIDTH $end
$var reg 32 K" q [31:0] $end
$upscope $end
$scope module InstrReg $end
$var wire 1 $ clk $end
$var wire 1 6 en $end
$var wire 1 % reset $end
$var wire 32 L" d [31:0] $end
$var parameter 32 M" WIDTH $end
$var reg 32 N" q [31:0] $end
$upscope $end
$scope module PCReg $end
$var wire 1 $ clk $end
$var wire 1 3 en $end
$var wire 1 % reset $end
$var wire 32 O" d [31:0] $end
$var parameter 32 P" WIDTH $end
$var reg 32 Q" q [31:0] $end
$upscope $end
$scope module RD1Reg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 R" d [31:0] $end
$var parameter 32 S" WIDTH $end
$var reg 32 T" q [31:0] $end
$upscope $end
$scope module RD2Reg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 U" d [31:0] $end
$var parameter 32 V" WIDTH $end
$var reg 32 W" q [31:0] $end
$upscope $end
$scope module RD3Reg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 X" d [31:0] $end
$var parameter 32 Y" WIDTH $end
$var reg 32 Z" q [31:0] $end
$upscope $end
$scope module adrmux $end
$var wire 32 [" d0 [31:0] $end
$var wire 1 8 s $end
$var wire 32 \" y [31:0] $end
$var wire 32 ]" d1 [31:0] $end
$var parameter 32 ^" WIDTH $end
$upscope $end
$scope module alu $end
$var wire 2 _" ALUControl [1:0] $end
$var wire 1 `" carry $end
$var wire 1 a" overflow $end
$var wire 1 b" zero $end
$var wire 33 c" sum [32:0] $end
$var wire 1 d" neg $end
$var wire 32 e" condinvb [31:0] $end
$var wire 32 f" SrcB [31:0] $end
$var wire 32 g" SrcA [31:0] $end
$var wire 4 h" ALUFlags [3:0] $end
$var reg 32 i" ALUResult [31:0] $end
$upscope $end
$scope module div $end
$var wire 1 , op $end
$var wire 32 j" rm [31:0] $end
$var wire 32 k" rn [31:0] $end
$var wire 32 l" y [31:0] $end
$var wire 32 m" u_y [31:0] $end
$var wire 32 n" s_y [31:0] $end
$scope module s $end
$var wire 32 o" rm [31:0] $end
$var wire 32 p" rn [31:0] $end
$var wire 32 q" y [31:0] $end
$upscope $end
$scope module u $end
$var wire 32 r" rm [31:0] $end
$var wire 32 s" rn [31:0] $end
$var wire 32 t" y [31:0] $end
$var wire 32 u" abs_rn [31:0] $end
$var wire 32 v" abs_rm [31:0] $end
$scope module a_rm $end
$var wire 32 w" value [31:0] $end
$var wire 32 x" abs_value [31:0] $end
$upscope $end
$scope module a_rn $end
$var wire 32 y" value [31:0] $end
$var wire 32 z" abs_value [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ext $end
$var wire 2 {" ImmSrc [1:0] $end
$var wire 24 |" Instr [23:0] $end
$var reg 32 }" ExtImm [31:0] $end
$upscope $end
$scope module mla1 $end
$var wire 1 + mla_op $end
$var wire 32 ~" rm [31:0] $end
$var wire 32 !# rn [31:0] $end
$var wire 32 "# y [31:0] $end
$upscope $end
$scope module muxALUSRCA $end
$var wire 32 ## d0 [31:0] $end
$var wire 32 $# d1 [31:0] $end
$var wire 1 ; s $end
$var wire 32 %# y [31:0] $end
$var parameter 32 &# WIDTH $end
$upscope $end
$scope module muxALUSRCB $end
$var wire 32 '# d2 [31:0] $end
$var wire 2 (# s [1:0] $end
$var wire 32 )# y [31:0] $end
$var wire 32 *# d1 [31:0] $end
$var wire 32 +# d0 [31:0] $end
$var parameter 32 ,# WIDTH $end
$upscope $end
$scope module muxResult $end
$var wire 32 -# d0 [31:0] $end
$var wire 32 .# d1 [31:0] $end
$var wire 2 /# s [1:0] $end
$var wire 32 0# y [31:0] $end
$var wire 32 1# d2 [31:0] $end
$var parameter 32 2# WIDTH $end
$upscope $end
$scope module mx4 $end
$var wire 32 3# d00 [31:0] $end
$var wire 32 4# d01 [31:0] $end
$var wire 32 5# d10 [31:0] $end
$var wire 1 - div $end
$var wire 1 * shift $end
$var wire 32 6# y [31:0] $end
$upscope $end
$scope module pre_ra1mux $end
$var wire 4 7# d0 [3:0] $end
$var wire 4 8# d1 [3:0] $end
$var wire 1 7 s $end
$var wire 4 9# y [3:0] $end
$var parameter 32 :# WIDTH $end
$upscope $end
$scope module ra1mux $end
$var wire 4 ;# d0 [3:0] $end
$var wire 4 <# d1 [3:0] $end
$var wire 1 =# s $end
$var wire 4 ># y [3:0] $end
$var parameter 32 ?# WIDTH $end
$upscope $end
$scope module ra2mux $end
$var wire 4 @# d0 [3:0] $end
$var wire 4 A# d1 [3:0] $end
$var wire 1 B# s $end
$var wire 1 7 x $end
$var wire 4 C# y [3:0] $end
$var parameter 32 D# WIDTH $end
$upscope $end
$scope module ra4mux $end
$var wire 4 E# d0 [3:0] $end
$var wire 4 F# d1 [3:0] $end
$var wire 1 7 s $end
$var wire 4 G# y [3:0] $end
$var parameter 32 H# WIDTH $end
$upscope $end
$scope module rf $end
$var wire 1 $ clk $end
$var wire 32 I# r15 [31:0] $end
$var wire 4 J# ra1 [3:0] $end
$var wire 4 K# ra2 [3:0] $end
$var wire 4 L# ra3 [3:0] $end
$var wire 4 M# wa4 [3:0] $end
$var wire 32 N# wd4 [31:0] $end
$var wire 1 0 we4 $end
$var wire 32 O# rd3 [31:0] $end
$var wire 32 P# rd2 [31:0] $end
$var wire 32 Q# rd1 [31:0] $end
$upscope $end
$scope module rotation $end
$var wire 32 R# ExtImm [31:0] $end
$var wire 32 S# ExtImm_rot [31:0] $end
$var wire 4 T# rot [3:0] $end
$upscope $end
$scope module shift $end
$var wire 1 U# op $end
$var wire 1 V# op1 $end
$var wire 32 W# rm [31:0] $end
$var wire 32 X# rs [31:0] $end
$var wire 2 Y# sh [1:0] $end
$var wire 5 Z# shamt5 [4:0] $end
$var wire 32 [# y [31:0] $end
$var wire 32 \# shift_offset [31:0] $end
$var wire 32 ]# lsr_shift [31:0] $end
$var wire 32 ^# lsl_shift [31:0] $end
$var wire 32 _# asr_shift [31:0] $end
$scope module a $end
$var wire 32 `# rm [31:0] $end
$var wire 32 a# shift_offset [31:0] $end
$var wire 32 b# asr_value [31:0] $end
$upscope $end
$scope module l $end
$var wire 32 c# rm [31:0] $end
$var wire 32 d# shift_offset [31:0] $end
$var wire 32 e# lsl_value [31:0] $end
$upscope $end
$scope module mx_sh $end
$var wire 1 U# op $end
$var wire 1 V# op1 $end
$var wire 32 f# rs [31:0] $end
$var wire 5 g# shamt5 [4:0] $end
$var wire 32 h# value2shift [31:0] $end
$upscope $end
$scope module r $end
$var wire 32 i# rm [31:0] $end
$var wire 32 j# shift_offset [31:0] $end
$var wire 32 k# lsr_value [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 32 l# a [31:0] $end
$var wire 1 $ clk $end
$var wire 32 m# rd [31:0] $end
$var wire 32 n# wd [31:0] $end
$var wire 1 " we $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 H#
b100 D#
b100 ?#
b100 :#
b100000 2#
b100000 ,#
b100000 &#
b100000 ^"
b100000 Y"
b100000 V"
b100000 S"
b100000 P"
b100000 M"
b100000 J"
b100000 G"
b101 ~
b100 }
b11 |
b10 {
b0 z
b110 y
b111 x
b1 w
b1001 v
b1000 u
b10 a
b10 ^
b10 Z
$end
#0
$dumpvars
b0 n#
b11100000010011110000000000001111 m#
b0 l#
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
0V#
0U#
b0 T#
b0 S#
b0 R#
bx Q#
bx P#
bx O#
b100 N#
b0 M#
b0 L#
b0 K#
b0 J#
b100 I#
b0 G#
b0 F#
b0 E#
b0 C#
0B#
b0 A#
b0 @#
b0 >#
0=#
b1111 <#
b0 ;#
b0 9#
b0 8#
b0 7#
b100 6#
bx 5#
b100 4#
b100 3#
b100 1#
b100 0#
b10 /#
b0 .#
b0 -#
b0 +#
b0 *#
b100 )#
b10 (#
b100 '#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
bx q"
b0 p"
b0 o"
bx n"
b0 m"
bx l"
b0 k"
b0 j"
b100 i"
b0 h"
b0 g"
b100 f"
b100 e"
0d"
b100 c"
0b"
0a"
0`"
b0 _"
b100 ]"
b0 \"
b0 ["
b0 Z"
bx X"
b0 W"
bx U"
b0 T"
bx R"
b0 Q"
b100 O"
b0 N"
b11100000010011110000000000001111 L"
b0 K"
b11100000010011110000000000001111 I"
b0 H"
b100 F"
b0 E"
b0 D"
b0 C"
b100 B"
b0 A"
bx @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
bx 7"
bx 6"
bx 5"
b11100000010011110000000000001111 4"
b100 3"
b0 2"
b100 1"
b0 0"
b0 /"
b100 ."
b0 -"
b0 ,"
b0 +"
b100 *"
bz )"
b10 ("
b0 '"
b0 &"
b10 %"
b0 $"
b0 #"
b1 ""
b100010101100 !"
b10 t
b10 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
0l
b10 k
0j
b0 i
b10 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 `
b0 _
0]
b0 \
b0 [
0Y
b0 X
0W
0V
0U
0T
1S
b0 R
b0 Q
b0 P
0O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b10 H
b0 G
b0 F
0E
1D
0C
b0 B
0A
b10 @
b0 ?
b0 >
b0 =
b0 <
1;
b10 :
b0 9
08
07
16
b0 5
b0 4
13
b11100000010011110000000000001111 2
b0 1
00
b10 /
b0 .
0-
0,
0+
0*
bz )
b0 (
b11100000010011110000000000001111 '
b0 &
1%
1$
b0 #
0"
b0 !
$end
#5
0$
0%
#10
b1000 3"
b1000 O"
b1000 ]"
b1000 0#
b1000 I#
b1000 N#
b1000 B"
b1000 F"
b1000 1#
b1000 6#
b1000 6"
b1000 U"
b1000 P#
b1000 7"
b1000 R"
b1000 Q#
03
b1111 ="
b1111 *#
b1111 S#
b1111 9"
b1111 C#
b1111 K#
b1111 :"
b1111 >#
b1111 J#
1O
bx m"
bx t"
0D
06
b11100010100000000010000000000001 '
b11100010100000000010000000000001 2
b11100010100000000010000000000001 4"
b11100010100000000010000000000001 I"
b11100010100000000010000000000001 L"
b11100010100000000010000000000001 m#
b1000 ."
b1000 i"
b1000 3#
b1111 >"
b1111 }"
b1111 R#
b1111 -"
b1111 9#
b1111 ;#
b100 c
b100 o
b1110 K
b1110 Q
b101100 !"
b110 ""
b100 #
b100 (
b100 9
b100 A"
b100 \"
b100 l#
b1000 c"
b100 2"
b100 g"
b100 %#
b10011110000000000001111 |"
b1111 F#
b1111 @#
b1111 8#
b1111 7#
b11100000010011110000 >
bx u"
bx z"
bx E"
bx "#
bx ##
bx !
bx &
bx .
bx 0"
bx +#
bx [#
bx n#
bx v"
bx x"
b1 #"
b100 ;"
b100 Q"
b100 ["
b100 $#
b11100000010011110000000000001111 4
b11100000010011110000000000001111 <"
b11100000010011110000000000001111 N"
b11100000010011110000000000001111 ?"
b11100000010011110000000000001111 K"
b11100000010011110000000000001111 .#
bx /"
bx T"
bx k"
bx p"
bx s"
bx y"
bx !#
bx _#
bx b#
bx ^#
bx e#
bx ]#
bx k#
bx ,"
bx W"
bx W#
bx `#
bx c#
bx i#
bx +"
bx Z"
bx j"
bx o"
bx r"
bx w"
bx ~"
bx X#
bx f#
b100 C"
b100 H"
b100 -#
1$
#15
0$
#20
b1 \
b10 X
1b"
b110 <
b110 I
b110 P
b110 D"
b110 h"
1`"
b0 B"
b0 F"
b0 1#
b0 6#
b11111111111111111111111111110111 e"
b1000 1"
b1000 f"
b1000 )#
b1000 4#
b0 ."
b0 i"
b0 3#
b100000000000000000000000000000000 c"
b1000 2"
b1000 g"
b1000 %#
b1 =
b1 J
b1 m
b1 $"
b1 _"
b0 /
b0 @
b0 h
b0 s
b0 ("
b0 /#
0;
b0 :
b0 H
b0 k
b0 t
b0 %"
b0 (#
1l
b1000 !
b1000 &
b1000 .
b1000 0"
b1000 +#
b1000 [#
b1000 n#
b1000 u"
b1000 z"
b1000 E"
b1000 "#
b1000 ##
b1 !"
b1000 ""
b1000 C"
b1000 H"
b1000 -#
b1000 _#
b1000 b#
b1000 ^#
b1000 e#
b1000 ]#
b1000 k#
b1000 ,"
b1000 W"
b1000 W#
b1000 `#
b1000 c#
b1000 i#
b1000 /"
b1000 T"
b1000 k"
b1000 p"
b1000 s"
b1000 y"
b1000 !#
b11100010100000000010000000000001 ?"
b11100010100000000010000000000001 K"
b11100010100000000010000000000001 .#
b110 #"
1$
#25
0$
#30
b0 X
0a"
b10000 B"
b10000 F"
b10000 1#
b10000 6#
0`"
0d"
b0 \
b1000 e"
b0 <
b0 I
b0 P
b0 D"
b0 h"
0b"
b10000 ."
b10000 i"
b10000 3#
b10000 c"
10
b0 =
b0 J
b0 m
b0 $"
b0 _"
b0 7"
b0 R"
b0 Q#
b0 6"
b0 U"
b0 P#
1A
0l
b0 3"
b0 O"
b0 ]"
b0 0#
b0 I#
b0 N#
b100000000 !"
b0 ""
b1000 #"
b0 C"
b0 H"
b0 -#
1$
#35
0$
#40
b1000 B"
b1000 F"
b1000 1#
b1000 6#
b100 e"
b1000 7"
b1000 R"
b1000 Q#
b1000 6"
b1000 U"
b1000 P#
b100 1"
b100 f"
b100 )#
b100 4#
b0 m"
b0 t"
b1000 ."
b1000 i"
b1000 3#
13
00
b1000 3"
b1000 O"
b1000 ]"
b1000 0#
b1000 I#
b1000 N#
b1000 c"
b100 2"
b100 g"
b100 %#
1D
0A
16
b10 /
b10 @
b10 h
b10 s
b10 ("
b10 /#
1;
b10 :
b10 H
b10 k
b10 t
b10 %"
b10 (#
b0 !
b0 &
b0 .
b0 0"
b0 +#
b0 [#
b0 n#
b0 u"
b0 z"
b0 E"
b0 "#
b0 ##
b100010101100 !"
b1 ""
b0 5"
b0 X"
b0 O#
b10000 C"
b10000 H"
b10000 -#
b0 _#
b0 b#
b0 ^#
b0 e#
b0 ]#
b0 k#
b0 ,"
b0 W"
b0 W#
b0 `#
b0 c#
b0 i#
b0 /"
b0 T"
b0 k"
b0 p"
b0 s"
b0 y"
b0 !#
b0 #"
1$
#45
0$
#50
b1100 3"
b1100 O"
b1100 ]"
b1100 0#
b1100 I#
b1100 N#
b1100 B"
b1100 F"
b1100 1#
b1100 6#
bx 6"
bx U"
bx P#
b0 7"
b0 R"
b0 Q#
03
b1 ="
b1 *#
b1 S#
b1 9"
b1 C#
b1 K#
b0 :"
b0 >#
b0 J#
0D
06
b11100010100000000001000000000010 '
b11100010100000000001000000000010 2
b11100010100000000001000000000010 4"
b11100010100000000001000000000010 I"
b11100010100000000001000000000010 L"
b11100010100000000001000000000010 m#
b1100 ."
b1100 i"
b1100 3#
b1 >"
b1 }"
b1 R#
b10 8"
b10 G#
b10 M#
b0 -"
b0 9#
b0 ;#
b101000 c
b101000 o
b10 g
b10 r
b101100 !"
b111 ""
b1000 #
b1000 (
b1000 9
b1000 A"
b1000 \"
b1000 l#
b1100 c"
b1000 2"
b1000 g"
b1000 %#
b100000000010000000000001 |"
b0 F#
b10 E#
b10 A#
b1 @#
b1 8#
b0 7#
b11100010100000000010 >
b1000 u"
b1000 z"
b1000 E"
b1000 "#
b1000 ##
b1000 !
b1000 &
b1000 .
b1000 0"
b1000 +#
b1000 [#
b1000 n#
b0 v"
b0 x"
b1 #"
b1000 ;"
b1000 Q"
b1000 ["
b1000 $#
b11100010100000000010000000000001 4
b11100010100000000010000000000001 <"
b11100010100000000010000000000001 N"
b1000 /"
b1000 T"
b1000 k"
b1000 p"
b1000 s"
b1000 y"
b1000 !#
b1000 _#
b1000 b#
b1000 ^#
b1000 e#
b1000 ]#
b1000 k#
b1000 ,"
b1000 W"
b1000 W#
b1000 `#
b1000 c#
b1000 i#
b0 +"
b0 Z"
b0 j"
b0 o"
b0 r"
b0 w"
b0 ~"
b0 X#
b0 f#
b1000 C"
b1000 H"
b1000 -#
1$
#55
0$
#60
b1 B"
b1 F"
b1 1#
b1 6#
b1 e"
b1 ."
b1 i"
b1 3#
b1 1"
b1 f"
b1 )#
b1 4#
b1 c"
b0 2"
b0 g"
b0 %#
b0 /
b0 @
b0 h
b0 s
b0 ("
b0 /#
0;
b1 :
b1 H
b1 k
b1 t
b1 %"
b1 (#
1l
bx !
bx &
bx .
bx 0"
bx +#
bx [#
bx n#
b0 u"
b0 z"
b0 E"
b0 "#
b0 ##
b11 !"
b1000 ""
b1100 C"
b1100 H"
b1100 -#
bx _#
bx b#
bx ^#
bx e#
bx ]#
bx k#
bx ,"
bx W"
bx W#
bx `#
bx c#
bx i#
b0 /"
b0 T"
b0 k"
b0 p"
b0 s"
b0 y"
b0 !#
b11100010100000000001000000000010 ?"
b11100010100000000001000000000010 K"
b11100010100000000001000000000010 .#
b111 #"
1$
#65
0$
#70
bx X
bx B"
bx F"
bx 1#
bx 6#
xa"
x`"
xd"
bx \
bx <
bx I
bx P
bx D"
bx h"
xb"
bx ."
bx i"
bx 3#
bx c"
bx e"
bx 1"
bx f"
bx )#
bx 4#
10
1A
b0 :
b0 H
b0 k
b0 t
b0 %"
b0 (#
0l
b1 3"
b1 O"
b1 ]"
b1 0#
b1 I#
b1 N#
b100000000 !"
b0 ""
b1000 #"
b1 C"
b1 H"
b1 -#
1$
#75
0$
#80
b0 X
b1100 B"
b1100 F"
b1100 1#
b1100 6#
0a"
0`"
0d"
b0 \
b0 <
b0 I
b0 P
b0 D"
b0 h"
0b"
b1100 ."
b1100 i"
b1100 3#
b1100 c"
b100 e"
b100 1"
b100 f"
b100 )#
b100 4#
13
00
b1000 2"
b1000 g"
b1000 %#
b1100 3"
b1100 O"
b1100 ]"
b1100 0#
b1100 I#
b1100 N#
1D
0A
16
b10 /
b10 @
b10 h
b10 s
b10 ("
b10 /#
1;
b10 :
b10 H
b10 k
b10 t
b10 %"
b10 (#
b100010101100 !"
b1 ""
bx C"
bx H"
bx -#
b0 #"
1$
#85
0$
#90
b10000 3"
b10000 O"
b10000 ]"
b10000 0#
b10000 I#
b10000 N#
b10000 B"
b10000 F"
b10000 1#
b10000 6#
b1 6"
b1 U"
b1 P#
03
b10 ="
b10 *#
b10 S#
b10 9"
b10 C#
b10 K#
0D
06
b11100010100000000000000000001100 '
b11100010100000000000000000001100 2
b11100010100000000000000000001100 4"
b11100010100000000000000000001100 I"
b11100010100000000000000000001100 L"
b11100010100000000000000000001100 m#
b10000 ."
b10000 i"
b10000 3#
b10 >"
b10 }"
b10 R#
b1 8"
b1 G#
b1 M#
b1 g
b1 r
b101100 !"
b111 ""
b1100 #
b1100 (
b1100 9
b1100 A"
b1100 \"
b1100 l#
b10000 c"
b1100 2"
b1100 g"
b1100 %#
b100000000001000000000010 |"
b1 E#
b1 A#
b10 @#
b10 8#
b11100010100000000001 >
b1 #"
b1100 ;"
b1100 Q"
b1100 ["
b1100 $#
b11100010100000000001000000000010 4
b11100010100000000001000000000010 <"
b11100010100000000001000000000010 N"
b1100 C"
b1100 H"
b1100 -#
1$
#95
0$
#100
b10 B"
b10 F"
b10 1#
b10 6#
b10 e"
b10 ."
b10 i"
b10 3#
b10 1"
b10 f"
b10 )#
b10 4#
b10 c"
b0 2"
b0 g"
b0 %#
b0 /
b0 @
b0 h
b0 s
b0 ("
b0 /#
0;
b1 :
b1 H
b1 k
b1 t
b1 %"
b1 (#
1l
b1 !
b1 &
b1 .
b1 0"
b1 +#
b1 [#
b1 n#
b11 !"
b1000 ""
b10000 C"
b10000 H"
b10000 -#
b1 _#
b1 b#
b1 ^#
b1 e#
b1 ]#
b1 k#
b1 ,"
b1 W"
b1 W#
b1 `#
b1 c#
b1 i#
b11100010100000000000000000001100 ?"
b11100010100000000000000000001100 K"
b11100010100000000000000000001100 .#
b111 #"
1$
#105
0$
#110
b1 B"
b1 F"
b1 1#
b1 6#
b1 ."
b1 i"
b1 3#
b1 c"
b1 e"
b1 1"
b1 f"
b1 )#
b1 4#
10
1A
b0 :
b0 H
b0 k
b0 t
b0 %"
b0 (#
0l
b10 3"
b10 O"
b10 ]"
b10 0#
b10 I#
b10 N#
b100000000 !"
b0 ""
b1000 #"
b10 C"
b10 H"
b10 -#
1$
#115
0$
#120
b10000 B"
b10000 F"
b10000 1#
b10000 6#
b100 e"
b10000 ."
b10000 i"
b10000 3#
b100 1"
b100 f"
b100 )#
b100 4#
13
00
b10000 c"
b1100 2"
b1100 g"
b1100 %#
b10000 3"
b10000 O"
b10000 ]"
b10000 0#
b10000 I#
b10000 N#
1D
0A
16
b10 /
b10 @
b10 h
b10 s
b10 ("
b10 /#
1;
b10 :
b10 H
b10 k
b10 t
b10 %"
b10 (#
b100010101100 !"
b1 ""
b1 C"
b1 H"
b1 -#
b0 #"
1$
#125
0$
#130
b10100 3"
b10100 O"
b10100 ]"
b10100 0#
b10100 I#
b10100 N#
b10100 B"
b10100 F"
b10100 1#
b10100 6#
bx 6"
bx U"
bx P#
03
b1100 ="
b1100 *#
b1100 S#
b1100 9"
b1100 C#
b1100 K#
0D
06
b11100000001000110010000110010000 '
b11100000001000110010000110010000 2
b11100000001000110010000110010000 4"
b11100000001000110010000110010000 I"
b11100000001000110010000110010000 L"
b11100000001000110010000110010000 m#
b10100 ."
b10100 i"
b10100 3#
b1100 >"
b1100 }"
b1100 R#
b0 8"
b0 G#
b0 M#
b0 g
b0 r
b101100 !"
b111 ""
b10000 #
b10000 (
b10000 9
b10000 A"
b10000 \"
b10000 l#
b10100 c"
b10000 2"
b10000 g"
b10000 %#
b100000000000000000001100 |"
b0 E#
b0 A#
b1100 @#
b1100 8#
b11100010100000000000 >
b1 #"
b10000 ;"
b10000 Q"
b10000 ["
b10000 $#
b11100010100000000000000000001100 4
b11100010100000000000000000001100 <"
b11100010100000000000000000001100 N"
b10000 C"
b10000 H"
b10000 -#
1$
#135
0$
#140
b1100 B"
b1100 F"
b1100 1#
b1100 6#
b1100 e"
b1100 ."
b1100 i"
b1100 3#
b1100 1"
b1100 f"
b1100 )#
b1100 4#
b1100 c"
b0 2"
b0 g"
b0 %#
b0 /
b0 @
b0 h
b0 s
b0 ("
b0 /#
0;
b1 :
b1 H
b1 k
b1 t
b1 %"
b1 (#
1l
bx !
bx &
bx .
bx 0"
bx +#
bx [#
bx n#
b11 !"
b1000 ""
b10100 C"
b10100 H"
b10100 -#
bx _#
bx b#
bx ^#
bx e#
bx ]#
bx k#
bx ,"
bx W"
bx W#
bx `#
bx c#
bx i#
b11100000001000110010000110010000 ?"
b11100000001000110010000110010000 K"
b11100000001000110010000110010000 .#
b111 #"
1$
#145
0$
#150
bx X
bx B"
bx F"
bx 1#
bx 6#
xa"
x`"
xd"
bx \
bx <
bx I
bx P
bx D"
bx h"
xb"
bx ."
bx i"
bx 3#
bx c"
bx e"
bx 1"
bx f"
bx )#
bx 4#
10
1A
b0 :
b0 H
b0 k
b0 t
b0 %"
b0 (#
0l
b1100 3"
b1100 O"
b1100 ]"
b1100 0#
b1100 I#
b1100 N#
b100000000 !"
b0 ""
b1000 #"
b1100 C"
b1100 H"
b1100 -#
1$
#155
0$
#160
b0 X
b10100 B"
b10100 F"
b10100 1#
b10100 6#
0a"
0`"
0d"
b0 \
b0 <
b0 I
b0 P
b0 D"
b0 h"
0b"
b10100 ."
b10100 i"
b10100 3#
b10100 c"
b100 e"
b100 1"
b100 f"
b100 )#
b100 4#
13
00
b10000 2"
b10000 g"
b10000 %#
b10100 3"
b10100 O"
b10100 ]"
b10100 0#
b10100 I#
b10100 N#
1D
0A
16
b10 /
b10 @
b10 h
b10 s
b10 ("
b10 /#
1;
b10 :
b10 H
b10 k
b10 t
b10 %"
b10 (#
b100010101100 !"
b1 ""
b1100 7"
b1100 R"
b1100 Q#
b1100 5"
b1100 X"
b1100 O#
bx C"
bx H"
bx -#
b0 #"
1$
#165
0$
#170
b11000 3"
b11000 O"
b11000 ]"
b11000 0#
b11000 I#
b11000 N#
1,
b11000 B"
b11000 F"
b11000 1#
b11000 6#
b1 6"
b1 U"
b1 P#
b1100 7"
b1100 R"
b1100 Q#
17
03
bx !
bx &
bx .
bx 0"
bx +#
bx [#
bx n#
b10 9"
b10 C#
b10 K#
b0 :"
b0 >#
b0 J#
b1 m"
b1 t"
0D
06
b0 '
b0 2
b0 4"
b0 I"
b0 L"
b0 m#
b11000 ."
b11000 i"
b11000 3#
b1001000 ="
b1001000 *#
b1001000 S#
b10010000 >"
b10010000 }"
b10010000 R#
bx ]#
bx k#
bx ^#
bx e#
bx _#
bx b#
b0 \#
b0 a#
b0 d#
b0 h#
b0 j#
b10 5"
b10 X"
b10 O#
b11 8"
b11 G#
b11 M#
b0 -"
b0 9#
b0 ;#
b10 c
b10 o
b10 g
b10 r
1+
b101100 !"
b110 ""
b10100 #
b10100 (
b10100 9
b10100 A"
b10100 \"
b10100 l#
b11000 c"
b10100 2"
b10100 g"
b10100 %#
b1 T#
b1000110010000110010000 |"
1V#
1U#
b11 Z#
b11 g#
b1 L#
b11 F#
b10 E#
b10 A#
b0 @#
b0 8#
b11 7#
b1001 ?
b1001 e
b1001 p
b11100000001000110010 >
b1100 u"
b1100 z"
b10010000 E"
b10010000 "#
b10010000 ##
b1 @"
b1 l"
b1 5#
b1100 v"
b1100 x"
b1 #"
b10100 ;"
b10100 Q"
b10100 ["
b10100 $#
b11100000001000110010000110010000 4
b11100000001000110010000110010000 <"
b11100000001000110010000110010000 N"
b1100 /"
b1100 T"
b1100 k"
b1100 p"
b1100 s"
b1100 y"
b1100 !#
b1 n"
b1 q"
b1100 +"
b1100 Z"
b1100 j"
b1100 o"
b1100 r"
b1100 w"
b1100 ~"
b1100 X#
b1100 f#
b10100 C"
b10100 H"
b10100 -#
1$
#175
0$
#180
b11001 B"
b11001 F"
b11001 1#
b11001 6#
b1 e"
b11001 ."
b11001 i"
b11001 3#
b1 1"
b1 f"
b1 )#
b1 4#
b110 @"
b110 l"
b110 5#
b11001 c"
b11000 2"
b11000 g"
b11000 %#
b110 m"
b110 t"
b0 /
b0 @
b0 h
b0 s
b0 ("
b0 /#
0;
b0 :
b0 H
b0 k
b0 t
b0 %"
b0 (#
1l
b10 v"
b10 x"
b11000 E"
b11000 "#
b11000 ##
b1 !
b1 &
b1 .
b1 0"
b1 +#
b1 [#
b1 n#
1+
b1 !"
b1000 ""
b11000 C"
b11000 H"
b11000 -#
b110 n"
b110 q"
b10 +"
b10 Z"
b10 j"
b10 o"
b10 r"
b10 w"
b10 ~"
b10 X#
b10 f#
b1 _#
b1 b#
b1 ^#
b1 e#
b1 ]#
b1 k#
b1 ,"
b1 W"
b1 W#
b1 `#
b1 c#
b1 i#
b0 ?"
b0 K"
b0 .#
b110 #"
1$
#185
0$
#190
10
1A
0l
b11001 3"
b11001 O"
b11001 ]"
b11001 0#
b11001 I#
b11001 N#
1+
b100000000 !"
b0 ""
b1000 #"
b11001 C"
b11001 H"
b11001 -#
1$
#195
0$
#200
b11000 3"
b11000 O"
b11000 ]"
b11000 0#
b11000 I#
b11000 N#
b11000 B"
b11000 F"
b11000 1#
b11000 6#
b100 e"
b11000 ."
b11000 i"
b11000 3#
b100 1"
b100 f"
b100 )#
b100 4#
13
00
b11000 c"
b10100 2"
b10100 g"
b10100 %#
1D
0A
16
b10 /
b10 @
b10 h
b10 s
b10 ("
b10 /#
1;
b10 :
b10 H
b10 k
b10 t
b10 %"
b10 (#
1+
b100010101100 !"
b1 ""
b0 #"
1$
#205
0$
#210
b1100 6"
b1100 U"
b1100 P#
b11100 3"
b11100 O"
b11100 ]"
b11100 0#
b11100 I#
b11100 N#
b0 9"
b0 C#
b0 K#
0,
b11100 B"
b11100 F"
b11100 1#
b11100 6#
07
03
0O
b1100 E"
b1100 "#
b1100 ##
0D
06
b11100 ."
b11100 i"
b11100 3#
b0 ="
b0 *#
b0 S#
b0 >"
b0 }"
b0 R#
b1100 5"
b1100 X"
b1100 O#
b0 8"
b0 G#
b0 M#
b0 c
b0 o
b0 g
b0 r
b0 K
b0 Q
0+
b101100 !"
b110 ""
b11000 #
b11000 (
b11000 9
b11000 A"
b11000 \"
b11000 l#
b11100 c"
b11000 2"
b11000 g"
b11000 %#
b0 T#
b0 |"
0V#
0U#
b0 Z#
b0 g#
b0 L#
b0 F#
b0 E#
b0 A#
b0 7#
b0 ?
b0 e
b0 p
b0 >
b1 #"
b11000 ;"
b11000 Q"
b11000 ["
b11000 $#
b0 4
b0 <"
b0 N"
b11000 C"
b11000 H"
b11000 -#
1$
#215
0$
#220
b1100 B"
b1100 F"
b1100 1#
b1100 6#
b1100 e"
b1100 1"
b1100 f"
b1100 )#
b1100 4#
b1100 ."
b1100 i"
b1100 3#
b11000 c"
b1100 2"
b1100 g"
b1100 %#
b10 =
b10 J
b10 m
b10 $"
b10 _"
b1 m"
b1 t"
b0 /
b0 @
b0 h
b0 s
b0 ("
b0 /#
0;
b0 :
b0 H
b0 k
b0 t
b0 %"
b0 (#
1l
b1 @"
b1 l"
b1 5#
b1100 v"
b1100 x"
b1100 !
b1100 &
b1100 .
b1100 0"
b1100 +#
b1100 [#
b1100 n#
b1 !"
b1000 ""
b11100 C"
b11100 H"
b11100 -#
b1 n"
b1 q"
b1100 +"
b1100 Z"
b1100 j"
b1100 o"
b1100 r"
b1100 w"
b1100 ~"
b1100 X#
b1100 f#
b1100 _#
b1100 b#
b1100 ^#
b1100 e#
b1100 ]#
b1100 k#
b1100 ,"
b1100 W"
b1100 W#
b1100 `#
b1100 c#
b1100 i#
b110 #"
1$
#225
0$
#230
b11000 B"
b11000 F"
b11000 1#
b11000 6#
b11000 ."
b11000 i"
b11000 3#
b0 =
b0 J
b0 m
b0 $"
b0 _"
1A
0l
b1100 3"
b1100 O"
b1100 ]"
b1100 0#
b1100 I#
b1100 N#
b100000000 !"
b0 ""
b1000 #"
b1100 C"
b1100 H"
b1100 -#
1$
